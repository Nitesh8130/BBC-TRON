{
  "_from": "tronweb@^2.3.8",
  "_id": "tronweb@2.4.1",
  "_inBundle": false,
  "_integrity": "sha512-h2Pwx5eZ7gTFTYRYc5kfiepbMZiqlr6t5oxXp5bat7PYdY7YAFf2lOZT4lvqeCj/AQTit2j3zAE/URP8hGXcdw==",
  "_location": "/tronweb",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "tronweb",
    "fetchSpec": "^2.3.8",
    "name": "tronweb",
    "raw": "tronweb@^2.3.8",
    "rawSpec": "^2.3.8",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tronweb/-/tronweb-2.4.1.tgz",
  "_shasum": "8ac2d4cc41460bae5ef790570b216edd7bf280d2",
  "_shrinkwrap": null,
  "_spec": "tronweb@^2.3.8",
  "_where": "C:\\Users\\bblabs\\Documents\\code\\bb-lab\\node\\scripts",
  "author": {
    "name": "Kondax",
    "url": "https://github.com/Kondax"
  },
  "bugs": {
    "url": "https://github.com/tronprotocol/tron-web/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "TRON",
      "url": "https://github.com/tronprotocol"
    }
  ],
  "dependencies": {
    "@babel/runtime": "^7.0.0",
    "axios": "^0.18.0",
    "babel-runtime": "^6.26.0",
    "bignumber.js": "^7.2.1",
    "elliptic": "^6.4.1",
    "ethers": "^4.0.7",
    "eventemitter3": "^3.1.0",
    "semver": "^5.6.0",
    "validator": "^10.7.1"
  },
  "deprecated": false,
  "description": "JavaScript SDK that encapsulates the TRON Node HTTP API",
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/plugin-proposal-class-properties": "^7.0.0",
    "@babel/plugin-proposal-numeric-separator": "^7.0.0",
    "@babel/plugin-proposal-object-rest-spread": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "babel-loader": "^8.0.2",
    "babel-minify-webpack-plugin": "^0.3.1",
    "babel-plugin-istanbul": "^5.0.1",
    "babel-plugin-source-map-support": "^2.0.1",
    "chai": "^4.1.2",
    "chalk": "^2.4.1",
    "eth-sig-util": "^2.1.0",
    "globby": "^8.0.1",
    "grunt": "^1.0.3",
    "grunt-cli": "^1.3.1",
    "grunt-karma": "^3.0.0",
    "husky": "^1.0.0-rc.14",
    "istanbul": "^0.4.5",
    "istanbul-instrumenter-loader": "^3.0.1",
    "karma": "^4.0.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.2",
    "karma-coverage-istanbul-reporter": "^2.0.4",
    "karma-edge-launcher": "^0.4.2",
    "karma-firefox-launcher": "^1.1.0",
    "karma-mocha": "^1.3.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "^0.0.32",
    "karma-webpack": "4.0.0-rc.2",
    "matchdep": "^2.0.0",
    "mocha": "^5.2.0",
    "puppeteer": "^1.8.0",
    "rimraf": "^2.6.2",
    "source-map-support": "^0.5.9",
    "webpack": "^4.17.2",
    "webpack-cli": "^3.1.0",
    "webpack-node-externals": "^1.7.2"
  },
  "homepage": "https://github.com/tronprotocol/tron-web",
  "husky": {
    "hooks": {
      "pre-push": "node ./scripts/pre-push.js"
    }
  },
  "license": "MIT",
  "main": "dist/TronWeb.node.js",
  "name": "tronweb",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">\n  <img align=\"center\" src=\"https://raw.githubusercontent.com/tronprotocol/tron-web/master/assets/TronWeb-logo.png\" width=\"400\"/>\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/GsRgsTD\">\n    <img src=\"https://img.shields.io/badge/chat-on%20discord-brightgreen.svg\">\n  </a>\n  \n  <a href=\"https://github.com/tronprotocol/tron-web/issues\">\n    <img src=\"https://img.shields.io/github/issues/tronprotocol/tron-web.svg\">\n  </a>\n  \n  <a href=\"https://github.com/tronprotocol/tron-web/pulls\">\n    <img src=\"https://img.shields.io/github/issues-pr/tronprotocol/tron-web.svg\">\n  </a>\n  \n  <a href=\"https://github.com/tronprotocol/tron-web/graphs/contributors\"> \n    <img src=\"https://img.shields.io/github/contributors/tronprotocol/tron-web.svg\">\n  </a>\n  \n  <a href=\"LICENSE\">\n    <img src=\"https://img.shields.io/github/license/tronprotocol/tron-web.svg\">\n  </a>\n</p>\n\n## What is TronWeb?\n\n__[Tron Web - Developer Document](https://developers.tron.network/docs/tron-web-intro)__\n\nTronWeb aims to deliver a unified, seamless development experience influenced by Ethereum's [Web3](https://github.com/ethereum/web3.js/) implementation. We have taken the core ideas and expanded upon it to unlock the functionality of TRON's unique feature set along with offering new tools for integrating DApps in the browser, Node.js and IoT devices.\n\n## Compatibility\n- Version built for Node.js v6 and above\n- Version built for browsers with more than 0.25% market share\n\nYou can access either version specifically from the [dist](dist) folder.\n\nTronWeb is also compatible with frontend frameworks such as:\n- Angular \n- React\n- Vue.\n\nYou can also ship TronWeb in a Chrome extension.\n\n## Installation\n\n### Node.js\n```bash\nnpm install tronweb\n```\nor\n```bash\nyarn add tronweb\n```\n\n### Browser\nFirst, don't use the release section of this repo, it has not updated in a long time.\n\nThen easiest way to use TronWeb in a browser is to install it as above and copy the dist file to your working folder. For example:\n```\ncp node_modules/tronweb/dist/TronWeb.js ./js/tronweb.js\n```\nso that you can call it in your HTML page as\n```\n<script src=\"./js/tronweb.js\"><script>\n```\n\n## Testnet\n\nShasta is the official Tron testnet. To use it use the following endpoint:\n```\nhttps://api.shasta.trongrid.io\n```\nGet some Shasta TRX at https://www.trongrid.io/shasta and play with it.\nAnything you do should be explorable on https://shasta.tronscan.org\n\n## Your local private network for heavy testing\n\nYou can set up your own private network, running Tron Quickstart. To do it you must [install Docker](https://docs.docker.com/install/) and, when ready, run a command like\n\n```bash\ndocker run -it --rm \\\n  -p 9090:9090 \\\n  -e \"defaultBalance=100000\" \\\n  -e \"showQueryString=true\" \\\n  -e \"showBody=true\" \\\n  -e \"formatJson=true\" \\\n  --name tron \\\n  trontools/quickstart\n```\n\n[More details about Tron Quickstart on GitHub](https://github.com/tronprotocol/docker-tron-quickstart)\n\n## Creating an Instance\n\nFirst off, in your javascript file, define TronWeb:\n\n```js\nconst TronWeb = require('tronweb')\n```\n\nWhen you instantiate TronWeb you can define\n\n* fullNode\n* solidityNode\n* eventServer\n* privateKey\n\nyou can also set a\n\n* fullHost\n\nwhich works as a jolly. If you do so, though, the more precise specification has priority.\nSupposing you are using a server which provides everything, like TronGrid, you can instantiate TronWeb as:\n\n```js\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    privateKey: 'your private key'\n})\n```\n\nFor retro-compatibility, though, you can continue to use the old approach, where any parameter is passed separately:\n```js\nconst tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey)\n\n```\n\nIf you are, for example, using a server as full and solidity node, and another server for the events, you can set it as:\n\n```js\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io',\n    eventServer: 'https://api.someotherevent.io',\n    privateKey: 'your private key'\n  }\n)\n```\n\nIf you are using different servers for anything, you can do\n```js\nconst tronWeb = new TronWeb({\n    fullNode: 'https://some-node.tld',\n    solidityNode: 'https://some-other-node.tld'\n    eventServer: 'https://some-event-server.tld',\n    privateKey: 'your private key'\n  }\n)\n```\n\n## A full example\n\nThe better way to understand how to work with Tron is to clone the [MetaCoin example](https://github.com/Tronbox-boxes/metacoin-box) and follow the instructions at\nhttps://github.com/Tronbox-boxes/metacoin-box\n\n## Contributions\n\nIn order to contribute you can\n\n* fork this repo and clone it locally\n* install the dependencies — `npm i`\n* do your changes to the code\n* build the TronWeb dist files — `npm run build`\n* run a local private network using Tron Quickstart\n* run the tests — `npm test:node`\n* push your changes and open a pull request\n\n## Recent History\n\n__2.3.7__\n* Get rid of jssha to reduce the size of the package a little bit.\n\n__2.3.6__\n* Supports `/wallet/getapprovedlist` and `/wallet/getsignweight` JavaTron API.\n* Adds test for multi-sign workflow.\n\n__2.3.5__\n* Fixes a typo in `#event.getEventsByContractAddress` naming.\n\n__2.3.4__\n* Adds options to `#plugin.register` to pass parameters to `pluginInterface`.\n\n__2.3.3__\n* Adds filters during event watching.\n\n__2.3.2__\n* Removes mixed approach instantiating tronWeb. Before you could pass the servers as an object, and the privateKey as a separate parameter. Now, you pass them either in the options object or in the params.\n\n__2.3.1__\n* Adds support for not-tld domain, like http://localhost\n* Improve the new format, allow passing the privateKey as a property in the option object\n\n__2.3.0__\n* Introduces new format to instantiate tronWeb, passing an options object instead that `fullNode`, `solidityNode` and `eventServer` as separate params\n* Fixes bug in `_watch` which causes a continuous update of the `since` parameter\n\n## Licence\n\nTronWeb is distributed under a MIT licence.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tronprotocol/tron-web.git"
  },
  "scripts": {
    "btest": "npm run build:dev && npm run test:node",
    "build": "npm run clean && webpack --config webpack.config.js --progress --colors",
    "build:dev": "NODE_ENV=development npm run build",
    "clean": "rimraf dist",
    "coverage": "node test/helpers/newAccounts 10 && npm run-script test:browser && npm run-script test:node",
    "prepare": "npm run build",
    "test": "node scripts/test-node.js && node test/helpers/newAccounts 10 && npx mocha 'test/**/*.test.js'",
    "test:browser": "node scripts/test-browser.js && npx karma start --single-run --browsers ChromeHeadless,Firefox,Edge"
  },
  "version": "2.4.1"
}
