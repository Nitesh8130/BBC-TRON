{
  "_from": "trongrid@^1.0.3",
  "_id": "trongrid@1.0.3",
  "_inBundle": false,
  "_integrity": "sha512-MBy629Cx2tqzRabrTTC4vRoGaJ/ZeWNcFyspUz7wsYfIWpS2773PaHAmNdwOcd3VWeTOhWxJI6mf+3W04USpeg==",
  "_location": "/trongrid",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "trongrid",
    "fetchSpec": "^1.0.3",
    "name": "trongrid",
    "raw": "trongrid@^1.0.3",
    "rawSpec": "^1.0.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/trongrid/-/trongrid-1.0.3.tgz",
  "_shasum": "2a338675b8ca67ca9883c1e2c4dd5a7d33a6fc1b",
  "_shrinkwrap": null,
  "_spec": "trongrid@^1.0.3",
  "_where": "C:\\Users\\bblabs\\Documents\\code\\bb-lab\\node\\scripts",
  "author": {
    "name": "Wyatt && Jackie",
    "url": "https://github.com/xxx"
  },
  "bugs": {
    "url": "https://github.com/TRON-US/trongrid-js/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "TRON",
      "url": "https://github.com/Tron-US"
    }
  ],
  "dependencies": {
    "@babel/runtime": "^7.0.0",
    "babel-runtime": "^6.26.0"
  },
  "deprecated": false,
  "description": "JavaScript SDK that encapsulates the TG3 HTTP API",
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/plugin-proposal-class-properties": "^7.0.0",
    "@babel/plugin-proposal-numeric-separator": "^7.0.0",
    "@babel/plugin-proposal-object-rest-spread": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "babel-loader": "^8.0.2",
    "babel-minify-webpack-plugin": "^0.3.1",
    "babel-plugin-istanbul": "^5.0.1",
    "babel-plugin-source-map-support": "^2.0.1",
    "chai": "^4.2.0",
    "mocha": "^5.2.0",
    "tronweb": "^2.3.2",
    "webpack": "^4.17.2",
    "webpack-cli": "^3.1.0",
    "webpack-node-externals": "^1.7.2"
  },
  "homepage": "https://github.com/TRON-US/trongrid-js",
  "license": "MIT",
  "main": "dist/trongrid.node.js",
  "name": "trongrid",
  "optionalDependencies": {},
  "readme": "# What is TronGridJS?\n\n__[TronGridJS - Developer Document](https://developers.tron.network/docs/trongrid-js-intro)__\n\nTronGridJS is a Javascript library for utilizing TronGrid APIs to retrieve blockchain data from the Tron network.\n\n## Compatibility\n- Version built for Node.js v6 and above\n- Version built for browsers with more than 0.25% market share\n\nTronGridJS is also compatible with frontend frameworks such as:\n- Angular\n- React\n- Vue\n\nYou can also ship TronGridJS in a Chrome extension.\n\n## Installation\n\n__[TronGridJS - NPM Package](https://www.npmjs.com/package/trongrid)__\n\n#### NPM\n```bash\n> npm install trongrid\n```\n\n#### Yarn\n```bash\n> yarn add trongrid\n```\n\n## Build Steps\n\nIf you'd like to download and build locally, please follow the steps below.\n```bash\ngit clone https://github.com/TRON-US/trongrid-js.git\ncd trongrid-js\nyarn install\nyarn dev\nyarn build\nyarn test\n```\n\n## Supported APIs\n\nTronGridJS allows to easily access the new v1 API provided by TronGrid.\n\n\n#### `tronGrid.account.get(accountAddress, options)`\nIt returns info about the account at `accountAddress`\n\nOptions:\n```\nonlyConfirmed       Show only the situation at latest confirmed block\n                        true | false        (default false)\n```\nIt substitutes the following JavaTron API:\n* /wallet/getaccount\n\n\n#### `tronGrid.account.getTransations(accountAddress, options)`\nIt returns all the transactions related to the account at `accountAddress`.\n\nOptions:\n```\nonly_confirmed      Shows only confirmed.\n                        true | false        default false\nonly_unconfirmed    Shows only unconfirmed.\n                        true | false        default false\nonly_to             Only transaction to address.\n                        true | false       default false\nonly_from           Only transaction from address.\n                        true | false        default false\nlimit               The requested number of transaction per page. Default 20. Max 200.\nfingerprint         The fingerprint of the last transaction returned by the previous page\norder_by            Sorts the results of the query. Example:\n                        order_by=timestamp,desc\nmin_timestamp       The minimum transaction timestamp        default 0\nmax_timestamp       The maximum transaction timestamp        default now\n\n```\nIt substitutes the following JavaTron API:\n* /walletextension/gettransactionfromthis\n* /walletextension/gettransactiontothis\n\n\n\n#### `tronGrid.asset.getAll(options)`\nIt returns all the assets on the TRON platform.\n\nOptions:\n```\norder_by            Sorts the results.\n                    Accepted fields:\n                        id\n                        name\n                        total_supply\n                        start_time\n                        end_time\nlimit               Number of assets per page\nfingerprint         Previous fingerprint. For pagination.\n```\n\n\n#### `tronGrid.asset.get(assetIdentifier, options)`\nIt returns an asset identified by the address of its owner, or its own ID\nIt substitutes the following JavaTron API:\n* /wallet/getassetissuebyaccount\n* /wallet/getassetissuebyid\n\n\n\n#### `tronGrid.asset.getList(assetName, options)`\nIt returns all the asset with the name `assetName`\n\nOptions:\n```\nlimit               The requested number of assets per page. Default 20. Max 200.\nfingerprint         The fingerprint of the last asset returned by the previous page.\n                    When there is a pagination, the minimum limit is set to 20.\norder_by            Sorts the results of the query.\n                    Accepted fields:\n                        id\n                        name\n                        total_supply\n                        start_time\n                        end_time\n                    Example:\n                        order_by=start_time,desc   (starts from the most recent ICO)\n                        order_by=id,asc            (starts from the oldest)\n\nonly_confirmed      Shows only the situation at latest confirmed block.\n                        true | false        default false\n\n```\n\nIt substitutes the following JavaTron API:\n* /wallet/getassetissuelistbyname\n* /wallet/getassetissuelist\n\n\n\n#### `tronGrid.block.getEvents(identifier, options)`\nIt returns all the events of a specific block.\nThe identifier can be either `latest` or a block number.\n\n\n\n#### `tronGrid.contract.getEvents(contractAddress, options)`\nIt returns all the events emitted by a smart contract.\n\nOptions:\n```\nonly_confirmed         Shows only confirmed.\n                            true | false                default false\nonly_unconfirmed       Shows only unconfirmed.\n                            true | false                default false\nevent_name             The name of the event\nblock_number           The block number for which the events are required\nmin_timestamp          The minimum block timestamp     default 0\nmax_timestamp          The maximum block timestamp        default now\norder_by               Sort the events. Accepted values:\n                            timestamp,asc\n                            timestamp,desc         (default)\nlimit                  For pagination.                 default 20, max 200\nfingerprint                The fingerprint of last event retrieved in the page\n```\n\n\n\n#### `tronGrid.transaction.getEvents(id, options)`\nIt returns all the events emitted in the transaction specified by `id`\n\n\n## Responses and pagination\n\nAny API will return a response with a success property, a data array and a meta object.\nFor example, `await tronGrid.asset.getAll()` will return something like\n\n```\n{\n    \"success\": true,\n    \"data\": [\n        {\n            \"confirmed\": true,\n            \"id\": \"1002225\",\n            \"abbr\": \"DbDsgVP3GRh\",\n            \"description\": \"KEYS unlock Cryptocurrency. Keys are a digital asset designed to work as medium of exchange.\",\n            \"frozen_supply\": [\n                {\n                    \"forzen_days\": 730,\n                    \"frozen_amount\": 75926666666\n                }\n            ],\n            \"name\": \"KEYS\",\n            \"num\": 22778,\n            \"precision\": 0,\n            \"total_supply\": 227780000000,\n            \"trx_num\": 22778,\n            \"url\": \"www.KEYS.crypto.org\",\n            \"vote_score\": 0,\n            \"owner_address\": \"4149b3dad5ef9dbab6a059fc95159efcecd5db910e\",\n            \"start_time\": 1553538720706,\n            \"end_time\": 1553538960706\n        },\n        ...\n    ],\n    \"meta\": {\n        \"total\": 2,\n        \"at\": 1553548776704,\n        \"fingerprint\": \"8xuwf4jd2dpoSms5KzLhxY9fmCm9oJA5164Qd7T2SexRSHYCwvRAr2zJGtwJceEcGWz\",\n        ...\n    }\n}\n\n```\n\nAs you can see, in the meta fields, there is the fingerprint you must pass to next request as an option in order to get next page.\n\n\n## Usage\n\nInstall [TronWeb](https://github.com/tronprotocol/tron-web) if you don't have done it yet.\n\n```bash\nnpm install tronweb\n```\n\nInitialize TronWeb and create TronGridJS instance\n\n```js\nconst TronGrid = require('trongrid');\nconst TronWeb = require('tronweb');\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io'\n});\n\nconst tronGrid = new TronGrid(tronWeb);\n\n```\n\n### Example\n\n```js\nconst TronGrid = require('trongrid');\nconst TronWeb = require('tronweb');\n\nconst tronWeb = new TronWeb({\n    fullHost: 'https://api.trongrid.io'\n});\n\nconst tronGrid = new TronGrid(tronWeb);\ntronGrid.setExperimental('your experimental key');\n\nasync function getAccount() {\n    const address = 'TPL66VK2gCXNCD7EJg9pgJRfqcRazjhUZY';\n\n    const options = {\n        Show_assets: true,\n        only_confirmed: true,\n    };\n\n    // awaiting\n    const account = await tronGrid.account.get(address, options);\n    console.log({account});\n\n    // promise\n    tronGrid.account.get(address, options).then(account => {\n        console.log({account});\n    }).catch(err => console.error(err));\n\n    // callback\n    tronGrid.account.get(address, options, (err, account) => {\n        if (err)\n            return console.error(err);\n\n        console.log({account});\n    });\n}\n\nasync function getTransactions() {\n    const address = 'TPL66VK2gCXNCD7EJg9pgJRfqcRazjhUZY';\n\n    const options = {\n        only_to: true,\n        only_confirmed: true,\n        limit: 100,\n        order_by: 'timestamp,asc',\n        min_timestamp: Date.now() - 60000 // from a minute ago to go on\n    };\n\n    // awaiting\n    const transactions = await tronGrid.account.getTransactions(address, options);\n    console.log({transactions});\n\n    // promise\n    tronGrid.account.getTransactions(address, options).then(transactions => {\n        console.log({transactions});\n    }).catch(err => console.error(err));\n\n    // callback\n    tronGrid.account.getTransactions(address, options, (err, transactions) => {\n        if (err)\n            return console.error(err);\n\n        console.log({transactions});\n    });\n}\n\nasync function getAssets() {\n    const address = 'TXk39yyhzpfbqtU1BATUzpcfQ37L8Tc4Ht';\n    const options = {};\n\n    // awaiting\n    const assets = await tronGrid.asset.get(address);\n    console.log({assets});\n\n    // promise\n    tronGrid.asset.get(address, options).then(assets => {\n        console.log({assets});\n    }).catch(err => console.error(err));\n\n    // callback\n    tronGrid.asset.get(address, options, (err, assets) => {\n        if (err)\n            return console.error(err);\n\n        console.log({assets});\n    });\n}\n\ngetAccount();\ngetTransactions();\ngetAssets();\n```\n\n### Version History\n\n__1.0.2__\n* Fix example in README using the new parameters min_timestamp, max_timestamp and order_by.\n\n__1.0.1__\n* Updates README for TronWeb 2.3.+.\n\n\n__1.0.0__\n* Supports retrieving info, transactions, and assets by identifier.\n* Supports retrieving events by contract address. \n* Supports retrieving transaction by ID.\n* Supports retrieving events by block number.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TRON-US/trongrid-js.git"
  },
  "scripts": {
    "build": "npm run clean && webpack --config webpack.config.js --progress --colors",
    "build:dev": "NODE_ENV=development npm run build",
    "clean": "rimraf dist",
    "prepare": "npm run build",
    "test": "node scripts/test-node.js && npx mocha 'test/**/*.test.js'"
  },
  "version": "1.0.3"
}
