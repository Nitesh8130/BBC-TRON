{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///./src/utils/validator.js","webpack:///external \"querystring\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///./src/lib/Account.js","webpack:///./src/lib/Asset.js","webpack:///./src/lib/Block.js","webpack:///./src/lib/Contract.js","webpack:///./src/lib/Transaction.js","webpack:///./src/lib/TronWebPlugin.js","webpack:///./src/lib/Base.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","isValidAddress","address","length","test","isValidEventName","eventName","isValidTransactionId","txId","isValidBlockNumber","blockNumber","toString","utils","account","Base","tronGrid","classCallCheck_default","this","TronGrid","Error","tronWeb","injectPromise","promiseInjector","apiNode","eventServer","Account","_this","possibleConstructorReturn_default","getPrototypeOf_default","options","arguments","undefined","callback","isFunction","isAddress","experimental","fromHex","console","log","concat","request","then","response","only_data_and_fingerprint","data","meta","fingerprint","catch","err","getTransactions","Asset","identifier","isString","isInteger","limit","getList","getAll","validator","Block","getEvents","Contract","contractAddress","_Object$assign","assign","fromTimestamp","size","onlyConfirmed","onlyUnconfirmed","previousFingerprint","sort","warn","push","qs","querystring","stringify","Transaction","transactionID","TronWebPlugin","setExperimental","defaultAddress","hex","direction","offset","only_to","only_from","asset","block","contract","transaction","code","tronWebPlugin","requires","components","trx","getTransactionsRelated"],"mappings":"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","file":"trongrid.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = {\n    isValidAddress: address =>  {\n        return !(!address || address.length !== 34 || /[^a-zA-Z0-9]/.test(address));\n\n    },\n    isValidEventName: eventName => {\n        return !(!eventName || /[^a-zA-Z0-9_]+/.test(eventName));\n\n    },\n    isValidTransactionId: txId => {\n        return /^[a-z0-9]{64}/.test(txId)\n    },\n    isValidBlockNumber: blockNumber => {\n        return !/[^0-9]/.test(blockNumber.toString())\n    }\n};\n","module.exports = require(\"querystring\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","import Base from './Base';\n\nlet utils;\n\nexport default class Account extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/accounts/:address\n     * @param address (hex or base58 format)\n     * @param options (filters: only_confirmed)\n     * @param callback\n     * @returns account\n     */\n    get(address, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.get, address, options);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        console.log(`v1/accounts/${address}`, options)\n\n        this.apiNode.request(`v1/accounts/${address}`, options, 'get').then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * @name TG3 API: /v1/accounts/:address/transactions\n     * @param address\n     * @param options\n     * @param callback\n     * @returns list of transactions\n     */\n    getTransactions(address, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactions, address, options);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        if (address.length !== 34)\n            address = this.tronWeb.address.fromHex(address);\n\n        this.apiNode.request(`v1/accounts/${address}/transactions`, options, 'get').then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\n\nexport default class Asset extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n    }\n\n    /**\n     * @name TG API: /v1/assets/:identifier\n     * @param identifier (asset ID, or issuer address)\n     * @param callback\n     * @returns list of assets\n     */\n    get(identifier = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!identifier || !(utils.isString(identifier) || utils.isInteger(identifier)))\n            return callback('Invalid identifier provided');\n\n        if (!callback)\n            return this.injectPromise(this.get, identifier, options);\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        this.apiNode.request(`v1/assets/${identifier}`, options, 'get').then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * @name TG API: /v1/assets/:name/list\n     * @param name of the asset\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getList(name = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!name || !utils.isString(name))\n            return callback('Invalid identifier provided');\n\n        if (options.limit <= 0)\n            return callback('Limit must be greater than 0');\n        if (options.limit > 200)\n            return callback('Max limit is 200');\n\n        if (!callback)\n            return this.injectPromise(this.getList, name, options);\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        this.apiNode.request(`v1/assets/${name}/list`, options, 'get').then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * @name TG API: /v1/assets\n     * @param lists all the assets\n     * @param options (limit, fingerprint, sort, filter)\n     * @param callback\n     * @returns list of assets\n     */\n    getAll(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (options.limit <= 0)\n            return callback('Limit must be greater than 0');\n        if (options.limit > 200)\n            return callback('Max limit is 200');\n\n        if (!callback)\n            return this.injectPromise(this.getAll, options);\n\n        if (this.tronGrid.experimental)\n            options.experimental = this.tronGrid.experimental;\n\n        this.apiNode.request(`v1/assets`, options, 'get').then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n}\n","import Base from './Base';\nconst validator = require('../utils/validator');\n\nlet utils;\n\nexport default class Block extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils\n    }\n\n    /**\n     * @name TG API: /v1/blocks/:blockNumber/events\n     * @param blockNumber\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(blockNumber = 'latest', options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, blockNumber, options);\n        }\n\n        if (!this.tronWeb.eventServer) {\n            return callback('No event server configured');\n        }\n\n        if (blockNumber !== 'latest' && !validator.isValidBlockNumber(blockNumber)) {\n            return callback('Invalid block number provided');\n        }\n\n        return this.tronWeb.eventServer.request(`v1/blocks/${blockNumber}/events`).then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n}\n","import Base from './Base';\nimport querystring from 'querystring';\n\nlet utils;\n\nexport default class Contract extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils\n    }\n\n    /**\n     * @name TG API: /v1//contracts/:contractAddress\n     * @param contractAddress\n     * @param options(onlyConfirmed, onlyUnconfirmed, eventName, blockNumber, fromTimestamp, size, previousFingerprint, sort)\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(contractAddress, options = {}, callback = false) {\n\n        let {\n            onlyConfirmed,\n            onlyUnconfirmed,\n            eventName,\n            blockNumber,\n            fromTimestamp,\n            size,\n            previousFingerprint,\n            sort\n        } = Object.assign({\n            fromTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20\n        }, options);\n\n        if(!callback)\n            return this.injectPromise(this.getEvents, contractAddress, options);\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if(!utils.isInteger(fromTimestamp))\n            return callback('Invalid sinceTimestamp provided');\n\n        if(!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if(size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        const qs = {};\n\n        if (onlyConfirmed) {\n            qs.onlyConfirmed = onlyConfirmed;\n        }\n\n        if (onlyUnconfirmed && !onlyConfirmed) {\n            qs.onlyUnconfirmed = onlyUnconfirmed;\n        }\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed;\n\n        if (eventName) {\n            qs.eventName = eventName;\n        }\n\n        if (blockNumber) {\n            qs.blockNumber = blockNumber;\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = fromTimestamp;\n        }\n\n        if (size) {\n            qs.size = size;\n        }\n\n        if (previousFingerprint) {\n            qs.previousFingerprint = previousFingerprint;\n        }\n\n        if (sort) {\n            qs.sort = sort;\n        }\n\n        return this.tronWeb.eventServer.request(`v1/contracts/${contractAddress}/events?${querystring.stringify(qs)}`).then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n}\n","import Base from './Base';\nconst validator = require('../utils/validator');\n\nlet utils;\n\nexport default class Transaction extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils\n    }\n\n    /**\n     * @name TG API: /transaction/:id\n     * @param transactionID\n     * @param callback\n     * @returns list of events\n     */\n    getEvents(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.getEvents, transactionID, options);\n        }\n\n        if (!this.tronWeb.eventServer) {\n            return callback('No event server configured');\n        }\n\n        if (!validator.isValidTransactionId(transactionID)) {\n            return callback('Invalid transaction id provided');\n        }\n\n        return this.tronWeb.eventServer.request(`v1/transactions/${transactionID}/events`).then(response => {\n            if (options.only_data_and_fingerprint) {\n                callback(null, response.data, response.meta.fingerprint);\n            } else {\n                callback(null, response);\n            }\n        }).catch(err => callback(err));\n    }\n\n}\n","import Base from './Base';\n\nlet utils;\nlet account;\n\nexport default class TronWebPlugin extends Base {\n\n    constructor(tronGrid) {\n        super(tronGrid);\n        utils = this.utils;\n        account = this.tronGrid.account;\n    }\n\n    setExperimental(experimental) {\n        this.tronGrid.setExperimental(experimental);\n    }\n\n    async getTransactions(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 20, offset = 0, callback = false) {\n\n        if (utils.isFunction(offset)) {\n            callback = offset;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 20;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        const options = {\n            limit,\n            only_data_and_fingerprint: true\n        }\n        if (direction === 'to') {\n            options.only_to = true\n        } else if (direction === 'from') {\n            options.only_from = true\n        }\n        return account.getTransactions(address, options, callback)\n    }\n\n}\n","import TronGrid from '..';\n\nclass Base {\n\n    constructor(tronGrid) {\n        if (!tronGrid || !(tronGrid instanceof TronGrid))\n            throw new Error('Expected instance of TronGrid');\n\n        this.tronGrid = tronGrid;\n        this.tronWeb = tronGrid.tronWeb;\n        this.injectPromise = this.tronWeb.utils.promiseInjector(this);\n        this.apiNode = this.tronWeb.eventServer;\n        this.utils = this.tronWeb.utils;\n    }\n\n}\n\nexport default Base\n","import Account from 'lib/Account';\nimport Asset from 'lib/Asset';\nimport Block from 'lib/Block';\nimport Contract from 'lib/Contract';\nimport Transaction from 'lib/Transaction';\nimport TronWebPlugin from 'lib/TronWebPlugin';\n\nlet utils;\nlet experimental;\n\nexport default class TronGrid {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.utils = utils = tronWeb.utils\n        this.account = new Account(this);\n        this.asset = new Asset(this);\n        this.block = new Block(this);\n        this.contract = new Contract(this);\n        this.transaction = new Transaction(this);\n\n        this.experimental = undefined;\n    }\n\n    setExperimental(code) {\n        this.experimental = code;\n    }\n\n    pluginInterface(options) {\n        if (options.experimental) {\n            experimental = options.experimental\n        }\n        const tronWebPlugin = new TronWebPlugin(this);\n        tronWebPlugin.setExperimental(options.experimental);\n        return {\n            requires: '^2.2.4',\n            components: {\n                trx: {\n                    getTransactionsRelated: tronWebPlugin.getTransactions\n                }\n            }\n        }\n\n    }\n}\n"],"sourceRoot":""}